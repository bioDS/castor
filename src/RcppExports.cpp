// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dense_binary_matrix_row2column_major_CPP
Rcpp::List dense_binary_matrix_row2column_major_CPP(const long NR, const long NC, const Rcpp::List& dense_rows, const bool Rindexing);
RcppExport SEXP castor_dense_binary_matrix_row2column_major_CPP(SEXP NRSEXP, SEXP NCSEXP, SEXP dense_rowsSEXP, SEXP RindexingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< const long >::type NC(NCSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dense_rows(dense_rowsSEXP);
    Rcpp::traits::input_parameter< const bool >::type Rindexing(RindexingSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_binary_matrix_row2column_major_CPP(NR, NC, dense_rows, Rindexing));
    return rcpp_result_gen;
END_RCPP
}
// exponentiate_matrix_for_multiple_scalings_CPP
NumericVector exponentiate_matrix_for_multiple_scalings_CPP(const long NR, const NumericVector& A, const NumericVector& scalings, const double epsilon, const long NPmin, const long NPmax, const bool enforce_probability_matrix);
RcppExport SEXP castor_exponentiate_matrix_for_multiple_scalings_CPP(SEXP NRSEXP, SEXP ASEXP, SEXP scalingsSEXP, SEXP epsilonSEXP, SEXP NPminSEXP, SEXP NPmaxSEXP, SEXP enforce_probability_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type scalings(scalingsSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const long >::type NPmin(NPminSEXP);
    Rcpp::traits::input_parameter< const long >::type NPmax(NPmaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type enforce_probability_matrix(enforce_probability_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(exponentiate_matrix_for_multiple_scalings_CPP(NR, A, scalings, epsilon, NPmin, NPmax, enforce_probability_matrix));
    return rcpp_result_gen;
END_RCPP
}
// smoothenTimeSeriesSavitzkyGolay_CPP
Rcpp::List smoothenTimeSeriesSavitzkyGolay_CPP(const NumericVector& times, const NumericVector& data, double windowTimeSpan, long windowIndexSpan, int order);
RcppExport SEXP castor_smoothenTimeSeriesSavitzkyGolay_CPP(SEXP timesSEXP, SEXP dataSEXP, SEXP windowTimeSpanSEXP, SEXP windowIndexSpanSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type windowTimeSpan(windowTimeSpanSEXP);
    Rcpp::traits::input_parameter< long >::type windowIndexSpan(windowIndexSpanSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothenTimeSeriesSavitzkyGolay_CPP(times, data, windowTimeSpan, windowIndexSpan, order));
    return rcpp_result_gen;
END_RCPP
}
// simulate_deterministic_diversity_growth_CPP
Rcpp::List simulate_deterministic_diversity_growth_CPP(const double birth_rate_intercept, const double birth_rate_factor, const double birth_rate_exponent, const double death_rate_intercept, const double death_rate_factor, const double death_rate_exponent, const double rarefaction, const long Nsplits, const NumericVector& times, const double start_time, const double start_diversity, const bool reverse, const bool coalescent, const bool include_probabilities, const bool include_birth_rates, const bool include_death_rates, const bool include_Nevents, const double runtime_out_seconds);
RcppExport SEXP castor_simulate_deterministic_diversity_growth_CPP(SEXP birth_rate_interceptSEXP, SEXP birth_rate_factorSEXP, SEXP birth_rate_exponentSEXP, SEXP death_rate_interceptSEXP, SEXP death_rate_factorSEXP, SEXP death_rate_exponentSEXP, SEXP rarefactionSEXP, SEXP NsplitsSEXP, SEXP timesSEXP, SEXP start_timeSEXP, SEXP start_diversitySEXP, SEXP reverseSEXP, SEXP coalescentSEXP, SEXP include_probabilitiesSEXP, SEXP include_birth_ratesSEXP, SEXP include_death_ratesSEXP, SEXP include_NeventsSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type birth_rate_intercept(birth_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_factor(birth_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_exponent(birth_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_intercept(death_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_factor(death_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_exponent(death_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type start_diversity(start_diversitySEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_probabilities(include_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_rates(include_birth_ratesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_rates(include_death_ratesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_Nevents(include_NeventsSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_deterministic_diversity_growth_CPP(birth_rate_intercept, birth_rate_factor, birth_rate_exponent, death_rate_intercept, death_rate_factor, death_rate_exponent, rarefaction, Nsplits, times, start_time, start_diversity, reverse, coalescent, include_probabilities, include_birth_rates, include_death_rates, include_Nevents, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversity_from_coalescent_CPP
Rcpp::List reconstruct_past_diversity_from_coalescent_CPP(const std::vector<double>& times, const std::vector<double>& raw_coalescent_diversities, const std::vector<double>& birth_rates_pc, const double rarefaction, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP castor_reconstruct_past_diversity_from_coalescent_CPP(SEXP timesSEXP, SEXP raw_coalescent_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP rarefactionSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_coalescent_diversities(raw_coalescent_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversity_from_coalescent_CPP(times, raw_coalescent_diversities, birth_rates_pc, rarefaction, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversity_from_biased_coalescent_CPP
Rcpp::List reconstruct_past_diversity_from_biased_coalescent_CPP(const std::vector<double>& times, const std::vector<double>& raw_coalescent_diversities, const std::vector<double>& birth_rates_pc, const std::vector<double>& discovery_fractions, const std::vector<double>& discovery_fraction_slopes, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP castor_reconstruct_past_diversity_from_biased_coalescent_CPP(SEXP timesSEXP, SEXP raw_coalescent_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP discovery_fractionsSEXP, SEXP discovery_fraction_slopesSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_coalescent_diversities(raw_coalescent_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type discovery_fractions(discovery_fractionsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type discovery_fraction_slopes(discovery_fraction_slopesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversity_from_biased_coalescent_CPP(times, raw_coalescent_diversities, birth_rates_pc, discovery_fractions, discovery_fraction_slopes, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversifications_CPP
Rcpp::List reconstruct_past_diversifications_CPP(const std::vector<double>& times, const std::vector<double>& raw_diversities, const std::vector<double>& birth_rates_pc, const double rarefaction, const long Nsplits, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP castor_reconstruct_past_diversifications_CPP(SEXP timesSEXP, SEXP raw_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP rarefactionSEXP, SEXP NsplitsSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_diversities(raw_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversifications_CPP(times, raw_diversities, birth_rates_pc, rarefaction, Nsplits, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// get_diversities_from_birth_and_death_events_CPP
Rcpp::List get_diversities_from_birth_and_death_events_CPP(const NumericVector& times, const NumericVector& birth_times, const NumericVector& death_times, const double start_diversity, const double Nsplits);
RcppExport SEXP castor_get_diversities_from_birth_and_death_events_CPP(SEXP timesSEXP, SEXP birth_timesSEXP, SEXP death_timesSEXP, SEXP start_diversitySEXP, SEXP NsplitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type birth_times(birth_timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type death_times(death_timesSEXP);
    Rcpp::traits::input_parameter< const double >::type start_diversity(start_diversitySEXP);
    Rcpp::traits::input_parameter< const double >::type Nsplits(NsplitsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_diversities_from_birth_and_death_events_CPP(times, birth_times, death_times, start_diversity, Nsplits));
    return rcpp_result_gen;
END_RCPP
}
// get_incoming_edges_per_clade_CPP
std::vector<std::vector<long> > get_incoming_edges_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP castor_get_incoming_edges_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_incoming_edges_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_root_clade_CPP
long get_root_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge);
RcppExport SEXP castor_get_root_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_root_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_traversal_root_to_tips_CPP
Rcpp::List get_tree_traversal_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const bool include_tips);
RcppExport SEXP castor_get_tree_traversal_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP include_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_traversal_root_to_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, include_tips));
    return rcpp_result_gen;
END_RCPP
}
// get_outgoing_edges_per_clade_CPP
std::vector<std::vector<long> > get_outgoing_edges_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP castor_get_outgoing_edges_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_outgoing_edges_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_paths_root_to_tips_CPP
std::vector<std::vector<long> > get_paths_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP castor_get_paths_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_paths_root_to_tips_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_adjacent_edges_per_edge_CPP
std::vector<std::vector<long> > get_adjacent_edges_per_edge_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP castor_get_adjacent_edges_per_edge_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_adjacent_edges_per_edge_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_total_tip_count_per_node_CPP
IntegerVector get_total_tip_count_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge);
RcppExport SEXP castor_get_total_tip_count_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_total_tip_count_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_mean_depth_per_node_CPP
NumericVector get_mean_depth_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length);
RcppExport SEXP castor_get_mean_depth_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mean_depth_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_min_max_tip_distance_from_root_CPP
Rcpp::List get_min_max_tip_distance_from_root_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length);
RcppExport SEXP castor_get_min_max_tip_distance_from_root_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_min_max_tip_distance_from_root_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_distances_from_root_CPP
NumericVector get_distances_from_root_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length);
RcppExport SEXP castor_get_distances_from_root_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distances_from_root_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_closest_tip_per_clade_CPP
Rcpp::List get_closest_tip_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& onlyToTips, bool only_descending_tips, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_closest_tip_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP onlyToTipsSEXP, SEXP only_descending_tipsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type onlyToTips(onlyToTipsSEXP);
    Rcpp::traits::input_parameter< bool >::type only_descending_tips(only_descending_tipsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_closest_tip_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, onlyToTips, only_descending_tips, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_farthest_tip_per_clade_CPP
Rcpp::List get_farthest_tip_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& onlyToTips, bool only_descending_tips, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_farthest_tip_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP onlyToTipsSEXP, SEXP only_descending_tipsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type onlyToTips(onlyToTipsSEXP);
    Rcpp::traits::input_parameter< bool >::type only_descending_tips(only_descending_tipsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_farthest_tip_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, onlyToTips, only_descending_tips, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_distance_matrix_between_clades_CPP
NumericMatrix get_distance_matrix_between_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& focal_clades, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_distance_matrix_between_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP focal_cladesSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type focal_clades(focal_cladesSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distance_matrix_between_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, focal_clades, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_distances_between_clades_CPP
NumericVector get_distances_between_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& cladesA, const IntegerVector& cladesB, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_distances_between_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP cladesASEXP, SEXP cladesBSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cladesA(cladesASEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cladesB(cladesBSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distances_between_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, cladesA, cladesB, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// count_clades_at_regular_times_CPP
Rcpp::List count_clades_at_regular_times_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const long Ntimes, double min_time, double max_time, const bool include_slopes);
RcppExport SEXP castor_count_clades_at_regular_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP NtimesSEXP, SEXP min_timeSEXP, SEXP max_timeSEXP, SEXP include_slopesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntimes(NtimesSEXP);
    Rcpp::traits::input_parameter< double >::type min_time(min_timeSEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_slopes(include_slopesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_clades_at_regular_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, Ntimes, min_time, max_time, include_slopes));
    return rcpp_result_gen;
END_RCPP
}
// count_clades_at_times_CPP
IntegerVector count_clades_at_times_CPP(const long Ntips, const long Nnodes, const long Nedges, IntegerVector tree_edge, const NumericVector& edge_length, const NumericVector& times);
RcppExport SEXP castor_count_clades_at_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_clades_at_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, times));
    return rcpp_result_gen;
END_RCPP
}
// get_speciation_extinction_events_CPP
Rcpp::List get_speciation_extinction_events_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double min_age, const double max_age, const IntegerVector& only_clades, const IntegerVector& omit_clades);
RcppExport SEXP castor_get_speciation_extinction_events_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP min_ageSEXP, SEXP max_ageSEXP, SEXP only_cladesSEXP, SEXP omit_cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type min_age(min_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type only_clades(only_cladesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type omit_clades(omit_cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_speciation_extinction_events_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, min_age, max_age, only_clades, omit_clades));
    return rcpp_result_gen;
END_RCPP
}
// sort_tree_edges_root_to_tips_CPP
IntegerVector sort_tree_edges_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const bool depth_first_search, const bool root_to_tips, const IntegerVector& tree_edge);
RcppExport SEXP castor_sort_tree_edges_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP depth_first_searchSEXP, SEXP root_to_tipsSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const bool >::type depth_first_search(depth_first_searchSEXP);
    Rcpp::traits::input_parameter< const bool >::type root_to_tips(root_to_tipsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_tree_edges_root_to_tips_CPP(Ntips, Nnodes, Nedges, depth_first_search, root_to_tips, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// root_tree_at_node_CPP
IntegerVector root_tree_at_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const long new_root_node);
RcppExport SEXP castor_root_tree_at_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP new_root_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type new_root_node(new_root_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(root_tree_at_node_CPP(Ntips, Nnodes, Nedges, tree_edge, new_root_node));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_with_collapsed_monofurcations_CPP
Rcpp::List get_tree_with_collapsed_monofurcations_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const bool force_keep_root);
RcppExport SEXP castor_get_tree_with_collapsed_monofurcations_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP force_keep_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_root(force_keep_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_with_collapsed_monofurcations_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, force_keep_root));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_with_specific_clades_CPP
Rcpp::List get_subtree_with_specific_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& clades_to_keep, const bool collapse_monofurcations, const bool force_keep_root, bool keep_all_children_of_explicit_clades_to_keep, bool keep_all_tips_of_explicit_clades_to_keep);
RcppExport SEXP castor_get_subtree_with_specific_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP clades_to_keepSEXP, SEXP collapse_monofurcationsSEXP, SEXP force_keep_rootSEXP, SEXP keep_all_children_of_explicit_clades_to_keepSEXP, SEXP keep_all_tips_of_explicit_clades_to_keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type clades_to_keep(clades_to_keepSEXP);
    Rcpp::traits::input_parameter< const bool >::type collapse_monofurcations(collapse_monofurcationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_root(force_keep_rootSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all_children_of_explicit_clades_to_keep(keep_all_children_of_explicit_clades_to_keepSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all_tips_of_explicit_clades_to_keep(keep_all_tips_of_explicit_clades_to_keepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_with_specific_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, clades_to_keep, collapse_monofurcations, force_keep_root, keep_all_children_of_explicit_clades_to_keep, keep_all_tips_of_explicit_clades_to_keep));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_at_node_CPP
Rcpp::List get_subtree_at_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const long new_root_node);
RcppExport SEXP castor_get_subtree_at_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP new_root_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type new_root_node(new_root_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_at_node_CPP(Ntips, Nnodes, Nedges, tree_edge, new_root_node));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_with_specific_tips_CPP
Rcpp::List get_subtree_with_specific_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& tips_to_keep, bool collapse_monofurcations, bool force_keep_root);
RcppExport SEXP castor_get_subtree_with_specific_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tips_to_keepSEXP, SEXP collapse_monofurcationsSEXP, SEXP force_keep_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tips_to_keep(tips_to_keepSEXP);
    Rcpp::traits::input_parameter< bool >::type collapse_monofurcations(collapse_monofurcationsSEXP);
    Rcpp::traits::input_parameter< bool >::type force_keep_root(force_keep_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_with_specific_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tips_to_keep, collapse_monofurcations, force_keep_root));
    return rcpp_result_gen;
END_RCPP
}
// find_root_for_monophyletic_clade_CPP
long find_root_for_monophyletic_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, IntegerVector tree_edge, const bool is_rooted, const std::vector<long>& target_tips, const bool as_MRCA);
RcppExport SEXP castor_find_root_for_monophyletic_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP is_rootedSEXP, SEXP target_tipsSEXP, SEXP as_MRCASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_rooted(is_rootedSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type target_tips(target_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_MRCA(as_MRCASEXP);
    rcpp_result_gen = Rcpp::wrap(find_root_for_monophyletic_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, is_rooted, target_tips, as_MRCA));
    return rcpp_result_gen;
END_RCPP
}
// find_edge_splitting_tree_CPP
Rcpp::List find_edge_splitting_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, IntegerVector tree_edge, const bool is_rooted, const std::vector<long>& target_tips, const bool include_misplaced);
RcppExport SEXP castor_find_edge_splitting_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP is_rootedSEXP, SEXP target_tipsSEXP, SEXP include_misplacedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_rooted(is_rootedSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type target_tips(target_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_misplaced(include_misplacedSEXP);
    rcpp_result_gen = Rcpp::wrap(find_edge_splitting_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, is_rooted, target_tips, include_misplaced));
    return rcpp_result_gen;
END_RCPP
}
// collapse_tree_at_resolution_CPP
Rcpp::List collapse_tree_at_resolution_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double resolution, const bool shorten, const std::string& criterion);
RcppExport SEXP castor_collapse_tree_at_resolution_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP resolutionSEXP, SEXP shortenSEXP, SEXP criterionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< const bool >::type shorten(shortenSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type criterion(criterionSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_tree_at_resolution_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, resolution, shorten, criterion));
    return rcpp_result_gen;
END_RCPP
}
// trim_tree_at_height_CPP
Rcpp::List trim_tree_at_height_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double max_distance_from_root);
RcppExport SEXP castor_trim_tree_at_height_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP max_distance_from_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type max_distance_from_root(max_distance_from_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(trim_tree_at_height_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, max_distance_from_root));
    return rcpp_result_gen;
END_RCPP
}
// extend_tree_to_height_CPP
Rcpp::List extend_tree_to_height_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, double new_height);
RcppExport SEXP castor_extend_tree_to_height_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP new_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type new_height(new_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(extend_tree_to_height_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, new_height));
    return rcpp_result_gen;
END_RCPP
}
// multifurcations_to_bifurcations_CPP
Rcpp::List multifurcations_to_bifurcations_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double dummy_edge_length);
RcppExport SEXP castor_multifurcations_to_bifurcations_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP dummy_edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type dummy_edge_length(dummy_edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(multifurcations_to_bifurcations_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, dummy_edge_length));
    return rcpp_result_gen;
END_RCPP
}
// merge_short_edges_CPP
Rcpp::List merge_short_edges_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double edge_length_epsilon, const bool force_keep_tips);
RcppExport SEXP castor_merge_short_edges_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP edge_length_epsilonSEXP, SEXP force_keep_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type edge_length_epsilon(edge_length_epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_tips(force_keep_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_short_edges_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, edge_length_epsilon, force_keep_tips));
    return rcpp_result_gen;
END_RCPP
}
// pick_random_tips_CPP
std::vector<long> pick_random_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const long Nrandoms, const long Nsubsets, const bool with_replacement);
RcppExport SEXP castor_pick_random_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP NrandomsSEXP, SEXP NsubsetsSEXP, SEXP with_replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type Nrandoms(NrandomsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsubsets(NsubsetsSEXP);
    Rcpp::traits::input_parameter< const bool >::type with_replacement(with_replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(pick_random_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, Nrandoms, Nsubsets, with_replacement));
    return rcpp_result_gen;
END_RCPP
}
// relative_to_absolute_node_ages_CPP
std::vector<double> relative_to_absolute_node_ages_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<double>& relative_node_ages, const std::vector<double>& min_abs_node_ages, const std::vector<double>& max_abs_node_ages);
RcppExport SEXP castor_relative_to_absolute_node_ages_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP relative_node_agesSEXP, SEXP min_abs_node_agesSEXP, SEXP max_abs_node_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type relative_node_ages(relative_node_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type min_abs_node_ages(min_abs_node_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type max_abs_node_ages(max_abs_node_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(relative_to_absolute_node_ages_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, relative_node_ages, min_abs_node_ages, max_abs_node_ages));
    return rcpp_result_gen;
END_RCPP
}
// propagate_min_ages_upstream_CPP
std::vector<double> propagate_min_ages_upstream_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<long>& anchor_nodes, const std::vector<long>& anchor_min_ages);
RcppExport SEXP castor_propagate_min_ages_upstream_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP anchor_nodesSEXP, SEXP anchor_min_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_nodes(anchor_nodesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_min_ages(anchor_min_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate_min_ages_upstream_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, anchor_nodes, anchor_min_ages));
    return rcpp_result_gen;
END_RCPP
}
// propagate_max_ages_downstream_CPP
std::vector<double> propagate_max_ages_downstream_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<long>& anchor_nodes, const std::vector<long>& anchor_max_ages);
RcppExport SEXP castor_propagate_max_ages_downstream_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP anchor_nodesSEXP, SEXP anchor_max_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_nodes(anchor_nodesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_max_ages(anchor_max_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate_max_ages_downstream_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, anchor_nodes, anchor_max_ages));
    return rcpp_result_gen;
END_RCPP
}
// tree_to_Newick_string_CPP
std::string tree_to_Newick_string_CPP(const long Ntips, const long Nnodes, const long Nedges, IntegerVector tree_edge, const NumericVector& edge_length, const StringVector& tip_labels, const StringVector& node_labels, const long digits, const double root_edge_length);
RcppExport SEXP castor_tree_to_Newick_string_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_labelsSEXP, SEXP node_labelsSEXP, SEXP digitsSEXP, SEXP root_edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tip_labels(tip_labelsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type node_labels(node_labelsSEXP);
    Rcpp::traits::input_parameter< const long >::type digits(digitsSEXP);
    Rcpp::traits::input_parameter< const double >::type root_edge_length(root_edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_to_Newick_string_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_labels, node_labels, digits, root_edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_depth_consenTRAIT_CPP
Rcpp::List get_trait_depth_consenTRAIT_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& state_per_tip, const double threshold_fraction, const bool count_singletons, const bool weighted, const double singleton_threshold, const long Npermutations, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_trait_depth_consenTRAIT_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP state_per_tipSEXP, SEXP threshold_fractionSEXP, SEXP count_singletonsSEXP, SEXP weightedSEXP, SEXP singleton_thresholdSEXP, SEXP NpermutationsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type state_per_tip(state_per_tipSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold_fraction(threshold_fractionSEXP);
    Rcpp::traits::input_parameter< const bool >::type count_singletons(count_singletonsSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< const double >::type singleton_threshold(singleton_thresholdSEXP);
    Rcpp::traits::input_parameter< const long >::type Npermutations(NpermutationsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_depth_consenTRAIT_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, state_per_tip, threshold_fraction, count_singletons, weighted, singleton_threshold, Npermutations, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// autocorrelation_function_of_continuous_trait_CPP
Rcpp::List autocorrelation_function_of_continuous_trait_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& state_per_tip, const long Npairs, const long Nbins, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_autocorrelation_function_of_continuous_trait_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP state_per_tipSEXP, SEXP NpairsSEXP, SEXP NbinsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type state_per_tip(state_per_tipSEXP);
    Rcpp::traits::input_parameter< const long >::type Npairs(NpairsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nbins(NbinsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(autocorrelation_function_of_continuous_trait_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, state_per_tip, Npairs, Nbins, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_empirical_state_frequencies_per_node_CPP
Rcpp::List get_empirical_state_frequencies_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, const IntegerVector& tip_states);
RcppExport SEXP castor_get_empirical_state_frequencies_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP tip_statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tip_states(tip_statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_empirical_state_frequencies_per_node_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, tip_states));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_richness_collectors_curve_CPP
Rcpp::List get_trait_richness_collectors_curve_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const long root, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& tip2first_trait, const IntegerVector& tip2last_trait, const IntegerVector& traits, const IntegerVector& rarefaction_depths, const long Nrepeats, const std::string& tip_distribution, const bool use_realized_depths);
RcppExport SEXP castor_get_trait_richness_collectors_curve_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP rootSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip2first_traitSEXP, SEXP tip2last_traitSEXP, SEXP traitsSEXP, SEXP rarefaction_depthsSEXP, SEXP NrepeatsSEXP, SEXP tip_distributionSEXP, SEXP use_realized_depthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const long >::type root(rootSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tip2first_trait(tip2first_traitSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tip2last_trait(tip2last_traitSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type traits(traitsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rarefaction_depths(rarefaction_depthsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nrepeats(NrepeatsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type tip_distribution(tip_distributionSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_realized_depths(use_realized_depthsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_richness_collectors_curve_CPP(Ntips, Nnodes, Nedges, Ntraits, root, tree_edge, edge_length, tip2first_trait, tip2last_trait, traits, rarefaction_depths, Nrepeats, tip_distribution, use_realized_depths));
    return rcpp_result_gen;
END_RCPP
}
// get_phylogenetic_independent_contrasts_CPP
Rcpp::List get_phylogenetic_independent_contrasts_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& tip_states, const bool only_bifurcations, const bool scaled);
RcppExport SEXP castor_get_phylogenetic_independent_contrasts_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP only_bifurcationsSEXP, SEXP scaledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const bool >::type only_bifurcations(only_bifurcationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type scaled(scaledSEXP);
    rcpp_result_gen = Rcpp::wrap(get_phylogenetic_independent_contrasts_CPP(Ntips, Nnodes, Nedges, Ntraits, tree_edge, edge_length, tip_states, only_bifurcations, scaled));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_stats_at_times_CPP
Rcpp::List get_trait_stats_at_times_CPP(const long Ntips, const long Nnodes, const long Nedges, IntegerVector tree_edge, const NumericVector& edge_length, const NumericVector& times, const NumericVector& states);
RcppExport SEXP castor_get_trait_stats_at_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP timesSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_stats_at_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, times, states));
    return rcpp_result_gen;
END_RCPP
}
// get_mrca_defining_tips_CPP
Rcpp::List get_mrca_defining_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const IntegerVector& mrcas, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_mrca_defining_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP mrcasSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mrcas(mrcasSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mrca_defining_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, mrcas, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_pairwise_ancestries_CPP
IntegerVector get_pairwise_ancestries_CPP(const long Ntips, const long Nnodes, const long Nedges, const long root, const IntegerVector& tree_edge, const IntegerVector& focal_clades);
RcppExport SEXP castor_get_pairwise_ancestries_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP rootSEXP, SEXP tree_edgeSEXP, SEXP focal_cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type root(rootSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type focal_clades(focal_cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pairwise_ancestries_CPP(Ntips, Nnodes, Nedges, root, tree_edge, focal_clades));
    return rcpp_result_gen;
END_RCPP
}
// get_most_recent_common_ancestors_CPP
IntegerVector get_most_recent_common_ancestors_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const IntegerVector& cladesA, const IntegerVector& cladesB, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_get_most_recent_common_ancestors_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP cladesASEXP, SEXP cladesBSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cladesA(cladesASEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type cladesB(cladesBSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_most_recent_common_ancestors_CPP(Ntips, Nnodes, Nedges, tree_edge, cladesA, cladesB, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_most_recent_common_ancestor_CPP
long get_most_recent_common_ancestor_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const IntegerVector& descendants);
RcppExport SEXP castor_get_most_recent_common_ancestor_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP descendantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type descendants(descendantsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_most_recent_common_ancestor_CPP(Ntips, Nnodes, Nedges, tree_edge, descendants));
    return rcpp_result_gen;
END_RCPP
}
// is_monophyletic_tip_set_CPP
bool is_monophyletic_tip_set_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const IntegerVector& focal_tips);
RcppExport SEXP castor_is_monophyletic_tip_set_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP focal_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type focal_tips(focal_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_monophyletic_tip_set_CPP(Ntips, Nnodes, Nedges, tree_edge, focal_tips));
    return rcpp_result_gen;
END_RCPP
}
// WMPR_ASR_CPP
NumericMatrix WMPR_ASR_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& tip_states, const NumericVector& transition_costs, const double branch_length_exponent, bool weight_posteriors_by_scenario_counts, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP castor_WMPR_ASR_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP transition_costsSEXP, SEXP branch_length_exponentSEXP, SEXP weight_posteriors_by_scenario_countsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type transition_costs(transition_costsSEXP);
    Rcpp::traits::input_parameter< const double >::type branch_length_exponent(branch_length_exponentSEXP);
    Rcpp::traits::input_parameter< bool >::type weight_posteriors_by_scenario_counts(weight_posteriors_by_scenario_countsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(WMPR_ASR_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, tip_states, transition_costs, branch_length_exponent, weight_posteriors_by_scenario_counts, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// ASR_with_fixed_rates_Markov_model_CPP
Rcpp::List ASR_with_fixed_rates_Markov_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, const NumericVector& edge_length, const std::vector<double>& transition_matrix, const ComplexVector& eigenvalues, const ComplexVector& EVmatrix, const ComplexVector& inverse_EVmatrix, const NumericVector& prior_probabilities_per_tip, const NumericVector& prior_probabilities_for_root, bool include_ancestral_likelihoods, const double exponentiation_accuracy, const long max_polynomials, const bool store_exponentials);
RcppExport SEXP castor_ASR_with_fixed_rates_Markov_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP eigenvaluesSEXP, SEXP EVmatrixSEXP, SEXP inverse_EVmatrixSEXP, SEXP prior_probabilities_per_tipSEXP, SEXP prior_probabilities_for_rootSEXP, SEXP include_ancestral_likelihoodsSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP, SEXP store_exponentialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type EVmatrix(EVmatrixSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type inverse_EVmatrix(inverse_EVmatrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prior_probabilities_per_tip(prior_probabilities_per_tipSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prior_probabilities_for_root(prior_probabilities_for_rootSEXP);
    Rcpp::traits::input_parameter< bool >::type include_ancestral_likelihoods(include_ancestral_likelihoodsSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_exponentials(store_exponentialsSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_with_fixed_rates_Markov_model_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, eigenvalues, EVmatrix, inverse_EVmatrix, prior_probabilities_per_tip, prior_probabilities_for_root, include_ancestral_likelihoods, exponentiation_accuracy, max_polynomials, store_exponentials));
    return rcpp_result_gen;
END_RCPP
}
// apply_fixed_rate_Markov_model_to_missing_clades_CPP
NumericVector apply_fixed_rate_Markov_model_to_missing_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& transition_matrix, const double exponentiation_accuracy, const long max_polynomials, LogicalVector likelihoods_known, NumericVector likelihoods);
RcppExport SEXP castor_apply_fixed_rate_Markov_model_to_missing_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP, SEXP likelihoods_knownSEXP, SEXP likelihoodsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type likelihoods_known(likelihoods_knownSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type likelihoods(likelihoodsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_fixed_rate_Markov_model_to_missing_clades_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, exponentiation_accuracy, max_polynomials, likelihoods_known, likelihoods));
    return rcpp_result_gen;
END_RCPP
}
// apply_MPR_to_missing_clades_CPP
NumericVector apply_MPR_to_missing_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, LogicalVector likelihoods_known, NumericVector likelihoods);
RcppExport SEXP castor_apply_MPR_to_missing_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP likelihoods_knownSEXP, SEXP likelihoodsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type likelihoods_known(likelihoods_knownSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type likelihoods(likelihoodsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_MPR_to_missing_clades_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, likelihoods_known, likelihoods));
    return rcpp_result_gen;
END_RCPP
}
// ASR_via_squared_change_parsimony_CPP
Rcpp::List ASR_via_squared_change_parsimony_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& tip_states, bool global);
RcppExport SEXP castor_ASR_via_squared_change_parsimony_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_via_squared_change_parsimony_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states, global));
    return rcpp_result_gen;
END_RCPP
}
// get_mean_state_per_node_CPP
Rcpp::List get_mean_state_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const std::vector<double>& tip_states);
RcppExport SEXP castor_get_mean_state_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mean_state_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states));
    return rcpp_result_gen;
END_RCPP
}
// ASR_via_independent_contrasts_CPP
Rcpp::List ASR_via_independent_contrasts_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const std::vector<double>& tip_states, const bool include_standard_errors);
RcppExport SEXP castor_ASR_via_independent_contrasts_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP include_standard_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_standard_errors(include_standard_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_via_independent_contrasts_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states, include_standard_errors));
    return rcpp_result_gen;
END_RCPP
}
// apply_BM_parsimony_to_missing_clades_CPP
NumericVector apply_BM_parsimony_to_missing_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, LogicalVector states_known, NumericVector states);
RcppExport SEXP castor_apply_BM_parsimony_to_missing_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP states_knownSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type states_known(states_knownSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_BM_parsimony_to_missing_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, states_known, states));
    return rcpp_result_gen;
END_RCPP
}
// simulate_fixed_rates_Markov_model_CPP
Rcpp::List simulate_fixed_rates_Markov_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const IntegerVector& tree_edge, const NumericVector& edge_length, const std::vector<double>& transition_matrix, const NumericVector& root_probabilities, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP castor_simulate_fixed_rates_Markov_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP root_probabilitiesSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type root_probabilities(root_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_fixed_rates_Markov_model_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, root_probabilities, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_Ornstein_Uhlenbeck_model_CPP
Rcpp::List simulate_Ornstein_Uhlenbeck_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double stationary_mean, const double stationary_std, const double decay_rate, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP castor_simulate_Ornstein_Uhlenbeck_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP stationary_meanSEXP, SEXP stationary_stdSEXP, SEXP decay_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_mean(stationary_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_std(stationary_stdSEXP);
    Rcpp::traits::input_parameter< const double >::type decay_rate(decay_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_Ornstein_Uhlenbeck_model_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, stationary_mean, stationary_std, decay_rate, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_reflected_Ornstein_Uhlenbeck_model_CPP
Rcpp::List simulate_reflected_Ornstein_Uhlenbeck_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const double reflection_point, const double spread, const double decay_rate, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP castor_simulate_reflected_Ornstein_Uhlenbeck_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP reflection_pointSEXP, SEXP spreadSEXP, SEXP decay_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type reflection_point(reflection_pointSEXP);
    Rcpp::traits::input_parameter< const double >::type spread(spreadSEXP);
    Rcpp::traits::input_parameter< const double >::type decay_rate(decay_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_reflected_Ornstein_Uhlenbeck_model_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, reflection_point, spread, decay_rate, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_scalar_Brownian_motion_model_CPP
Rcpp::List simulate_scalar_Brownian_motion_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& root_states, const double diffusivity, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP castor_simulate_scalar_Brownian_motion_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP diffusivitySEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const double >::type diffusivity(diffusivitySEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_scalar_Brownian_motion_model_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, root_states, diffusivity, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_multivariate_Brownian_motion_model_CPP
Rcpp::List simulate_multivariate_Brownian_motion_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const long Ndegrees, const IntegerVector& tree_edge, const NumericVector& edge_length, const NumericVector& root_states, const std::vector<double>& sigma, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP castor_simulate_multivariate_Brownian_motion_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP NdegreesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP sigmaSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const long >::type Ndegrees(NdegreesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_multivariate_Brownian_motion_model_CPP(Ntips, Nnodes, Nedges, Ntraits, Ndegrees, tree_edge, edge_length, root_states, sigma, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_neutral_gene_evolution_CPP
Rcpp::List simulate_neutral_gene_evolution_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nsites, const long Nstates, const IntegerVector& tree_edge, const NumericVector& edge_length, const IntegerVector& root_states, const double mutation_rate, const bool include_tips, const bool include_nodes, const bool include_gene_distances, const long Nsimulations);
RcppExport SEXP castor_simulate_neutral_gene_evolution_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NsitesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP mutation_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP include_gene_distancesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsites(NsitesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const double >::type mutation_rate(mutation_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_gene_distances(include_gene_distancesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_neutral_gene_evolution_CPP(Ntips, Nnodes, Nedges, Nsites, Nstates, tree_edge, edge_length, root_states, mutation_rate, include_tips, include_nodes, include_gene_distances, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_CPP
Rcpp::List generate_random_tree_CPP(const long max_tips, const double max_time, const double max_time_since_equilibrium, const double birth_rate_intercept, const double birth_rate_factor, const double birth_rate_exponent, const double death_rate_intercept, const double death_rate_factor, const double death_rate_exponent, const std::vector<double>& additional_rates_times, const std::vector<double>& additional_birth_rates_pc, const std::vector<double>& additional_death_rates_pc, const bool additional_periodic, const bool coalescent, const long Nsplits, const bool as_generations, const bool include_birth_times, const bool include_death_times);
RcppExport SEXP castor_generate_random_tree_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP birth_rate_interceptSEXP, SEXP birth_rate_factorSEXP, SEXP birth_rate_exponentSEXP, SEXP death_rate_interceptSEXP, SEXP death_rate_factorSEXP, SEXP death_rate_exponentSEXP, SEXP additional_rates_timesSEXP, SEXP additional_birth_rates_pcSEXP, SEXP additional_death_rates_pcSEXP, SEXP additional_periodicSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_intercept(birth_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_factor(birth_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_exponent(birth_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_intercept(death_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_factor(death_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_exponent(death_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_rates_times(additional_rates_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_birth_rates_pc(additional_birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_death_rates_pc(additional_death_rates_pcSEXP);
    Rcpp::traits::input_parameter< const bool >::type additional_periodic(additional_periodicSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_CPP(max_tips, max_time, max_time_since_equilibrium, birth_rate_intercept, birth_rate_factor, birth_rate_exponent, death_rate_intercept, death_rate_factor, death_rate_exponent, additional_rates_times, additional_birth_rates_pc, additional_death_rates_pc, additional_periodic, coalescent, Nsplits, as_generations, include_birth_times, include_death_times));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_BM_rates_CPP
Rcpp::List generate_random_tree_BM_rates_CPP(const long max_tips, const double max_time, const double max_time_since_equilibrium, const double birth_rate_diffusivity, const double min_birth_rate_pc, const double max_birth_rate_pc, const double death_rate_diffusivity, const double min_death_rate_pc, const double max_death_rate_pc, const bool coalescent, const long Nsplits, const bool as_generations, const bool include_birth_times, const bool include_death_times, const bool include_rates);
RcppExport SEXP castor_generate_random_tree_BM_rates_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP birth_rate_diffusivitySEXP, SEXP min_birth_rate_pcSEXP, SEXP max_birth_rate_pcSEXP, SEXP death_rate_diffusivitySEXP, SEXP min_death_rate_pcSEXP, SEXP max_death_rate_pcSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP, SEXP include_ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_diffusivity(birth_rate_diffusivitySEXP);
    Rcpp::traits::input_parameter< const double >::type min_birth_rate_pc(min_birth_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type max_birth_rate_pc(max_birth_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_diffusivity(death_rate_diffusivitySEXP);
    Rcpp::traits::input_parameter< const double >::type min_death_rate_pc(min_death_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type max_death_rate_pc(max_death_rate_pcSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_rates(include_ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_BM_rates_CPP(max_tips, max_time, max_time_since_equilibrium, birth_rate_diffusivity, min_birth_rate_pc, max_birth_rate_pc, death_rate_diffusivity, min_death_rate_pc, max_death_rate_pc, coalescent, Nsplits, as_generations, include_birth_times, include_death_times, include_rates));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_Mk_rates_CPP
Rcpp::List generate_random_tree_Mk_rates_CPP(const long max_tips, const double max_time, const double max_time_since_equilibrium, const long Nstates, const std::vector<double>& state_birth_rates, const std::vector<double>& state_death_rates, const long root_state, const std::vector<double>& transition_matrix, const bool coalescent, const long Nsplits, const bool as_generations, const bool all_transitions, const bool include_birth_times, const bool include_death_times, const bool include_rates);
RcppExport SEXP castor_generate_random_tree_Mk_rates_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP NstatesSEXP, SEXP state_birth_ratesSEXP, SEXP state_death_ratesSEXP, SEXP root_stateSEXP, SEXP transition_matrixSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP all_transitionsSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP, SEXP include_ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_birth_rates(state_birth_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_death_rates(state_death_ratesSEXP);
    Rcpp::traits::input_parameter< const long >::type root_state(root_stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type all_transitions(all_transitionsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_rates(include_ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_Mk_rates_CPP(max_tips, max_time, max_time_since_equilibrium, Nstates, state_birth_rates, state_death_rates, root_state, transition_matrix, coalescent, Nsplits, as_generations, all_transitions, include_birth_times, include_death_times, include_rates));
    return rcpp_result_gen;
END_RCPP
}
